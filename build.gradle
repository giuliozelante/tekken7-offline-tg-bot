plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id 'io.micronaut.application' version '4.4.2' apply false
    id 'io.micronaut.aot' version '4.4.2' apply false
    id 'com.palantir.git-version' version '3.1.0'
}

subprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'io.micronaut.application'
    apply plugin: 'io.micronaut.aot'
    apply plugin: 'com.palantir.git-version'

repositories {
    mavenCentral()
}

dependencies {
     annotationProcessor 'io.micronaut.data:micronaut-data-processor',
            'io.micronaut.serde:micronaut-serde-processor',
            'org.projectlombok:lombok'
    implementation 'io.micronaut:micronaut-http-client',
            'io.micronaut.data:micronaut-data-hibernate-jpa',
            'io.micronaut.serde:micronaut-serde-jackson',
            'io.micronaut.sql:micronaut-jdbc-hikari',
            'org.telegram:telegrambots:6.8.0',
            'p6spy:p6spy:3.9.1'
    compileOnly  'org.projectlombok:lombok'
    runtimeOnly 'ch.qos.logback:logback-classic',
            'com.h2database:h2',
            'org.yaml:snakeyaml:2.2'
}

application {
    mainClass.set('it.giuliozelante.tekken7.offline.tg.bot.App')
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// Disable GraalVM Native Image's automatic toolchain detection
graalvmNative.toolchainDetection = false

micronaut {
    processing {
        incremental(true)
        annotations('it.giuliozelante.tekken7.offline.tg.bot.*')
    }

    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        compileOnly("org.projectlombok:lombok")
        runtimeOnly("ch.qos.logback:logback-classic")
        annotationProcessor("io.micronaut:micronaut-http-validation")
        annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
        implementation("io.micronaut.serde:micronaut-serde-jackson")
        implementation("io.micronaut:micronaut-http-client")
    }

    java {
        sourceCompatibility = JavaVersion.toVersion("21")
        targetCompatibility = JavaVersion.toVersion("21")
    }

    version = determineVersion()

    graalvmNative.toolchainDetection = false
    micronaut {
        processing {
            incremental(true)
            annotations("it.giuliozelante.tekken7.offline.tg.bot.*")
        }
        aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
            optimizeServiceLoading = false
            convertYamlToJava = false
            precomputeOperations = true
            cacheEnvironment = true
            optimizeClassLoading = true
            deduceEnvironment = true
            optimizeNetty = true
            replaceLogbackXml = true
        }
    }


    tasks.named("dockerfileNative") {
        jdkVersion = "21"
    }

    graalvmNative {
        binaries {
            main {
                buildArgs.add('--initialize-at-build-time=ch.qos.logback.classic.Logger')
                buildArgs.add('--trace-object-instantiation=ch.qos.logback.classic.Logger')
                buildArgs.add('--initialize-at-run-time=io.netty.util.internal.logging.LocationAwareSlf4JLogger')
                buildArgs.add('--initialize-at-run-time=io.netty.channel.DefaultChannelPipeline')
                buildArgs.add('--initialize-at-run-time=io.netty.handler.flow.FlowControlHandler')
                buildArgs.add('--initialize-at-run-time=io.netty.channel.ChannelHandlerMask')
                buildArgs.add('--initialize-at-run-time=io.netty.handler.ssl.util.InsecureTrustManagerFactory')
                buildArgs.add('--initialize-at-run-time=io.netty.handler.codec.http2.Http2StreamChannelBootstrap')
                buildArgs.add('--initialize-at-run-time=io.netty.handler.ssl.SslHandler')
                buildArgs.add('--initialize-at-run-time=io.netty.channel.AbstractChannel')
                buildArgs.add('--initialize-at-run-time=io.netty.handler.codec.http2.Http2ControlFrameLimitEncoder')
                buildArgs.add('--initialize-at-run-time=io.netty.bootstrap.ChannelInitializerExtensions')
                buildArgs.add('--initialize-at-run-time=io.netty.channel.socket.oio.OioSocketChannel')
                buildArgs.add('--initialize-at-run-time=io.netty.channel.DelegatingChannelPromiseNotifier')
                buildArgs.add('--initialize-at-run-time=io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder')
                buildArgs.add('--initialize-at-run-time=io.netty.handler.codec.http2.DefaultHttp2Connection')
                buildArgs.add('--initialize-at-run-time=io.netty.util.ReferenceCountUtil')
                buildArgs.add('--initialize-at-run-time=io.netty.util.ResourceLeakDetector')
                buildArgs.add('--initialize-at-run-time=io.netty.channel.socket.nio.NioSocketChannel')
                buildArgs.add('--initialize-at-run-time=io.netty.channel.ChannelInitializer')
            }
        }
    }


    tasks.named("dockerfileNative") {
        jdkVersion = "21"
    }

}

def determineVersion() {
    def gitVersion = versionDetails()
    def lastTag = gitVersion.lastTag ?: '0.0'
    def (major, minor) = lastTag.tokenize('.') + [0, 0]
    def newMinor = (minor.toInteger() ?: 0) + 1
    return "${major}.${newMinor}"
}

