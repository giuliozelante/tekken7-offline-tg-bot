plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'io.micronaut.application' version '4.1.0'
    id 'io.micronaut.aot' version '4.1.0'
    id 'com.github.ben-manes.versions' version '0.47.0'
    id 'fr.brouillard.oss.gradle.jgitver' version '0.10.0-rc03'
}

subprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'io.micronaut.application'
    apply plugin: 'io.micronaut.aot'
    apply plugin: 'com.palantir.git-version'

repositories {
    mavenCentral()
}

dependencies {
     annotationProcessor 'io.micronaut.data:micronaut-data-processor',
            'io.micronaut.serde:micronaut-serde-processor',
            'org.projectlombok:lombok'
    implementation 'io.micronaut:micronaut-http-client',
            'io.micronaut.data:micronaut-data-hibernate-jpa',
            'io.micronaut.serde:micronaut-serde-jackson',
            'io.micronaut.sql:micronaut-jdbc-hikari',
            'org.telegram:telegrambots:6.8.0',
            'p6spy:p6spy:3.9.1'
    compileOnly  'org.projectlombok:lombok'
    runtimeOnly 'ch.qos.logback:logback-classic',
            'com.h2database:h2',
            'org.yaml:snakeyaml:2.2'
}

application {
    mainClass.set('it.giuliozelante.tekken7.offline.tg.bot.App')
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// Disable GraalVM Native Image's automatic toolchain detection
graalvmNative.toolchainDetection = false

micronaut {
    processing {
        incremental(true)
        annotations('it.giuliozelante.tekken7.offline.tg.bot.*')
    }
    aot {
    aot {
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
    }


    tasks.named("dockerfileNative") {
        jdkVersion = "21"
    }

}

def determineVersion() {
    def gitVersion = versionDetails()
    def lastTag = gitVersion.lastTag ?: '0.0'
    def (major, minor) = lastTag.tokenize('.') + [0, 0]
    def newMinor = (minor.toInteger() ?: 0) + 1
    return "${major}.${newMinor}"
}

def determineVersion() {
    def gitVersion = versionDetails()
    def lastTag = gitVersion.lastTag ?: '0.0'
    def (major, minor) = lastTag.tokenize('.') + [0, 0]
    def newMinor = (minor.toInteger() ?: 0) + 1
    return "${major}.${newMinor}"
}

